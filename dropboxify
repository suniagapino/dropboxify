#!/bin/sh
# or #!/bin/dash (which doesn't have a dash.vim yet and I love colors)
# POSIX shell compliant

# converts a home directory to symlinks using Dropbox defaults

USAGE='
usage: dropboxify [-D DROPBOX]
       dropboxify [-D DROPBOX] FILE|DIR ...

With no arguments interactively asks about moving and linking the current
working directory contents to Dropbox. Prompts and confirms everything.

With arguments moves and links the specific target FILE(s) or DIRectorie(s)
to a common Dropbox folder preserving the names. Fails on any name conflict.

  FILE  A specfic regular file path to be moved
  DIR   A regular directory to be moved (default: current directory)

OPTIONS
  -D    Use DROPBOX instead of default $HOME/Dropbox
  -i    Interactive mode (otherwise does not prompt if arguments given)
'

DEFDROPBOX="$HOME/Dropbox"

true=true
false=""
success=0
fail=1

interactive=$false
has_dropbox=$false
dont_use_default=$false
dropbox=""
targets=""
stuffhere="`pwd`/*"

ask ()
{
    while true; do
        printf "$1 [yn] "
        IFS= read -r yn < /dev/tty
        case "$yn" in
            [Yy]* ) answer=yes; yes=$true; no=$false return $success ;;
            [Nn]* ) answer=no; no=$true; yes=$false; return $fail ;;
            * ) echo "Please answer yes or no.";;
        esac
    done
}

askfor ()
{
    while true; do
        printf "$1 "
        IFS= read -r answer < /dev/tty
        if [ "$answer" ]; then 
            break;
        else
            echo "Sorry, didn't catch that."
        fi
    done
}

make_dropbox ()
{
    dropbox="$1"
    mkdir "$dropbox"
    if [ $? != 0 ]; then
        echo "Trouble making '$dropbox'."
        has_dropbox=$false
        dropbox=""
        return $fail
    else
        echo "$dropbox created."
        has_dropbox=$true
        dropbox="$dropbox"
        return $success
    fi
}

ask_about_default_dropbox ()
{
    dropbox=$DEFDROPBOX
    if [ -d "$dropbox" ] && [ ! $dont_use_default ];then
        ask "Want me to use your '$dropbox'?"
        if [ $yes ]; then
            has_dropbox=$true
            return $success
        else
            dont_use_default=$true
        fi
        askfor "Another location perhaps?"
        while true; do
            case "$answer" in 
                [Yy]es|[Yy]|[Oo]k ) askfor "Where?"; continue ;;
                [Nn]o|[Nn] ) return $fail ;;
                * ) dropbox=$answer; break ;;
            esac
        done
    fi

    if [ -d "$dropbox" ]; then
        echo "I see $dropbox exists. I'll use that."
        has_dropbox=$true
        return $success
    fi

    ask "Want me to make $dropbox?"
    [ $yes ] && make_dropbox "$dropbox"
    [ $has_dropbox ] && return $success
    return $fail
}

detect_dropbox ()
{
    dropbox="$1"
    if [ -d "$dropbox" ]; then
        has_dropbox=$true
        return $success
    fi

    if [ $interactive ];then
        while [ ! $has_dropbox ]; do
            ask_about_default_dropbox
        done
    else
        dropbox=$DEFDROPBOX
        if [ -d "$dropbox" ];then
            has_dropbox=$true
            return $success
        else
            return $fail
        fi
    fi
}

move_content ()
{
    from=$1
    to=$2
    hasfiles=`ls -1 $from/*`
    [ ! "$hasfiles" ] && return $success 
    mv "$from"/* "$to"
    if [ $? != 0 ]; then
        echo "Trouble moving '$from/*' to '$to' Check on this one."
        return $fail
    else
        echo "Moved '$from/*' to '$to'."
    fi
}

move ()
{
    from=$1
    to=$2
    mv "$from" "$to"
    if [ $? != 0 ]; then
        echo "Trouble moving '$from' to '$to' Check on this one."
        return $fail 
    else
        echo "Moved '$from' to '$to'."
    fi
}

remove_directory ()
{
    dir="$1"
    [ ! -e "$dir" ] && return $success
    rmdir "$dir"
    if [ $? != 0 ]; then
        echo "Trouble rmdir-ing '$dir/*'. Check on this one."
        return $fail 
    else
        echo "Removed '$dir'."
    fi
}

remove ()
{
    file="$1"
    [ ! -e "$file" ] && return $success
    rm "$file"
    if [ $? != 0 ]; then
        echo "Trouble rm-ing '$file'. Check on this one."
        return $fail 
    else
        echo "Removed '$file'."
    fi
}

link ()
{
    from=$1
    to=$2
    ln -s "$to" "$from"
    if [ $? != 0 ]; then
        echo "Trouble creating '$from' link to '$to' Check it."
        return $fail
    else
        echo "Replaced '$from' with a symbolic link to '$to'."
    fi
}

move_content_and_link ()
{
    from=$1
    to=$2
    move_content "$from" "$to" \
        && remove_directory "$from" \
        && link "$from" "$to"
}

move_and_link ()
{
    from=$1
    to=$2
    move "$from" "$to" \
        && remove "$from" \
        && link "$from" "$to"
}

dropboxify ()
{
    [ ! "$1" ] && return $success 

    echo "$1" | while IFS= read -r this
    do
        [ "$this" ] || continue

        thisbase=`basename "$this"`
        thisdir=`dirname "$this"`
        target=$dropbox/$thisbase
        this=$thisdir/$thisbase

        if [ -k "$this" ] || [ -L "$this" ]; then
            echo "Looks like $this is a symbolic link already. Skipping."
            continue
        fi

        thistype=""
        if [ -f "$this" ]; then
            thistype=f
        elif [ -d "$this" ]; then
            thistype=d
        else
            echo "Skipping $this since it doesn't look like a file or directory"
            continue
        fi

        if [ $interactive ]; then
            ask "Move $this to $target?"
            [ $no ] && continue
        fi

        targettype=""
        if [ -f "$target" ]; then
            targettype=f
        elif [ -d "$target" ]; then
            targettype=d
        fi

        if [ $targettype ]; then
            echo "Looks like $dropbox has $thisbase already."
        else
            move_and_link "$this" "$target"
            continue
        fi

        if [ "$targettype" = d ] && [ "$thistype" = d ]; then 
            move_content_and_link "$this" "$target"
            continue
        else
            echo "Cowardly skipping $this rather than replacing $target"
            continue
        fi

    done
}

exit_usage ()
{
    echo "$USAGE"
    exit $1
}

add_target ()
{
    [ ! "$1" ] && return $succes
    targets="$targets\n$1"
}

handle_args ()
{
    interactive=$true

    [ ! "$1" ] && return $success

    while [ "$1" ]; do
        arg="$1"
        shift 1
        case "$arg" in
            -D) interactive=$false; Dval=$1; shift 1; continue ;;
            -i) interactive=$true; continue ;;
            *) add_target "$arg"; continue ;;
        esac
    done
}

validate_targets ()
{
    if [ ! $targets ] && [ $interactive ]; then
        ask "Want to use the stuff here? ($stuffhere)"
        if [ $yes ]; then
            for target in $stuffhere; do
                add_target $target
            done
        else
            while true; do 
                askfor "Ok, what would you like to dropboxify then?"
                response=$answer
                echo "You answered:\n" $response
                ask "Is this correct?"
                [ $yes ] && break
            done
            for target in $response; do
                add_target $target
            done
        fi
    fi
    [ ! $targets ] && return $fail
    return $success
}

if [ ! "$TESTING_FUNCTIONS" ]; then

echo "Not yet ready for production, still testing functions"

handle_args "$@"
detect_dropbox $Dval   || exit_usage $fail;
validate_targets       || exit_usage $fail;
dropboxify $targets

#ask "Would you like to make links in your home directory to Dropbox stuff?"
#if [ $yes ]; then
#    whats_left
#fi

fi # TESTING_FUNCTIONS
